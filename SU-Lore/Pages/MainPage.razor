@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using SU_Lore.Controllers
@using SU_Lore.Database.Models.Accounts
@using SU_Lore.Helpers
@using SU_Lore.Pages.Components

@* ReSharper disable once InconsistentNaming *@
@inject IJSRuntime JS
@inject AuthenticationHelper AuthHelper
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IAsyncDisposable

<div class="screen">
    <audio src="resources/text.mp3" id="text_audio"></audio>
    <div id="audio_container" class="audio_container">

    </div>
    <div class="header">
        <span class="logo color-cc">
            <span class="nt-logo">N</span>
            Central Command
        </span>
        <span class="header-title" id="page-title">

        </span>
    </div>
    <Alert></Alert>
    <div class="parent" id="parent">
        <div class="header" id="header">
            <a class="button" id="edit-button">Edit</a>
            <a class="button" id="view-history-button">File history</a>
            <a class="button" id="copy-link-button">Get share link</a>
            <a class="button" id="raw-button">View raw</a>
            <a class="button" id="stats-button">Stats</a>
        </div>
        <a class="backlink" id="return-button"></a>
        <div id="content" class="overflow">
            <div id="password-field" class="hidden" style="white-space-collapse: collapse;">
                <p class="block block-error">ERROR ACCESSING CONTENT:<br/>PASSWORD REQUIRED.</p>
                <p class="color-cc">Please enter the password to access <span id="guid-container"></span></p>

                <input style="margin-left: 1rem;" autocomplete="off" type="password" id="password" placeholder="Password"/>
                <button class="button" id="password-submit">Submit</button>
                <button class="button" id="password-skip">High Command - Use bypass</button>
            </div>
            <div id="content-password" class="content" style="overflow: hidden">
                <span id="content-text"></span>
            </div>
        </div>
    </div>
</div>

<div class="comments">
    <div id="comments" class="comments-container">

    </div>
    <div class="comment-page-control" id="comment-page-control">
        <button class="button" id="comment-prev">Previous</button>
        <span id="comment-page">1/1</span>
        <button class="button" id="comment-next">Next</button>
    </div>
    <div class="comment-form" id="comment-form">
        <p>Commenting as: <i>@CurrentUser</i></p>
        <textarea class="comment-text-area" id="comment-text" placeholder="Enter your comment here"></textarea>
        <button class="button" id="comment-submit">Submit</button>
    </div>
</div>

@code {
    // This is basically a remake of the main page where the logic runs client sided instead of server sided.
    private IJSObjectReference? _module;
    private DotNetObjectReference<MainPage>? _dotNetRef;
    private Account? _account;

    private AuthenticationState AuthenticationState => AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
    private string CurrentUser => AccountController.GetProfile(AuthenticationState.User);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        _module = await JS.InvokeAsync<IJSObjectReference>("import",
            "./Pages/MainPage.razor.js");

        _account = await AuthHelper.FetchAccount();

        _dotNetRef = DotNetObjectReference.Create(this);
        await _module.InvokeVoidAsync("setDotnetHelper", _dotNetRef);
        await _module.InvokeVoidAsync("initRoles", _account?.Roles);
        await _module.InvokeVoidAsync("initProfile", CurrentUser);
        await _module.InvokeVoidAsync("addHandlers");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

    [JSInvokable]
    public async Task DeleteAccount()
    {
        if (_account == null)
        {
            await JS.InvokeVoidAsync("showAlert", "Error", "Not logged in.");
            return;
        }
        await AuthHelper.DeleteAccount(_account);
        NavigationManager.NavigateTo("/account/logout?redirect=/system/deleted", true);
    }
}