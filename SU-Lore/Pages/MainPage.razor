@page "/"

@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Serilog
@using SU_Lore.Data
@using SU_Lore.Data.RichText
@using SU_Lore.Database.Models.Accounts
@using SU_Lore.Database.Models.Pages
@using SU_Lore.Helpers
@using SU_Lore.Pages.Components

@inject NavigationManager NavigationManager
@inject PageReader PageReader
@inject RichTextParser RichTextParser
@inject IJSRuntime JsRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationHelper AuthHelper

<div class="screen">
    <audio src="resources/text.mp3" id="text_audio"></audio>
    <div id="audio_container" class="audio_container">
        
    </div>
    <div class="header">
        <span class="logo color-cc">
            <span class="nt-logo">N</span>
            Central Command
        </span>
        <span class="header-title">
            @if (_page != null && !string.IsNullOrEmpty(_page.Title) && !_page.Flags.HasFlag(PageFlagType.HideTitle))
            {
                @_page.Title
            }
        </span>
    </div>

    <Alert></Alert>
    <div class="parent" id="parent">
        <div class="header" id="header">
            @if (_page != null && !_page.VirtualPath.StartsWith("/system/")) // You cannot edit system pages (they are not stored in the database).
            {
                <!-- These are the "edit" buttons -->
                <a class="button" href="#/system/link/editor?mode=edit&id=@_page.PageGuid">Edit</a>
                <a class="button" href="#/system/link/history?page=@_page.PageGuid">File history</a>
                <a class="button" asp-method="CopyLink">Get share link</a>
                <a class="button" href="#/system/link/raw?page=@_page.Id">View raw</a>
                <a class="button" href="#/system/link/analyze?page=@_page.PageGuid">Stats</a>
            }
        </div>
        @if (_page != null && !_page.Flags.HasFlag(PageFlagType.HideBackButton))
        {
        <a class="backlink" @onclick="Return">@GetPageFromStack().Title</a>
        }
        <div id="content" class="overflow">
            <div id="password-field" class="hidden" style="white-space-collapse: collapse;">
                <a class="button" href="#/system/link/?page=/system/listing">Return to listing</a>
                <p class="block block-error">ERROR ACCESSING CONTENT:<br/>PASSWORD REQUIRED.</p>
                <p class="color-cc">Please enter the password to access <span id="guid-container"></span></p>

                <input style="margin-left: 1rem;" autocomplete="off" type="password" id="password" placeholder="Password"/>
                <button class="button" is-password="yep" asp-method="TryPassword">Submit</button>
                @{
                    if (_account?.Roles.HasAnyRole(Role.Admin, Role.Moderator, Role.DatabaseAdmin) ?? false)
                    {
                        <button class="button" is-password="yep" asp-method="SkipPassword">High Command - Use bypass</button>
                    }

                    if (_account?.Id == _passwordCachePage?.CreatedBy) // If the user is the creator of the page, they can bypass the password.
                    {
                        <button class="button" is-password="yep" asp-method="SkipPassword">Bypass password</button>
                    }
                }
            </div>
            <div id="content-password" class="content" style="overflow: hidden">
                <span>@_status.Content</span>
            </div>
        </div>
    </div>
</div>

@code {
    private Page? _page;
    private Page? _passwordCachePage;
    
    private Account? _account;

    // This is the actual content that is being displayed.
    private PageStatus _status = new PageStatus();
    private DotNetObjectReference<MainPage>? _dotNetRef;
    private CancellationTokenSource _cts = new CancellationTokenSource();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _dotNetRef = DotNetObjectReference.Create(this);
        _account = AuthHelper.FetchAccount().Result;
    }

    private Page GetPageFromStack()
    {
        if (_status.PageStack.Count == 0)
        {
            return _page!;
        }

        if (PageReader.TryGetPageFromPath(_status.PageStack.Peek(), out var page)) // Peek the stack.
        {
            return page;
        }
        else
        {
            throw new InvalidOperationException("Failed to get page from stack.");
        }
    }

    [JSInvokable]
    public async void CallAspMethod(string method)
    {
        var guid = "";
        switch (method)
        {
            case "CopyLink":
                CopyLink();
                break;
           case "TryPassword":
                // fetch the password from the input field.
                var password = await JsRuntime.InvokeAsync<string>("getValueFromInputElement", "password");
                guid = await JsRuntime.InvokeAsync<string>("getContentFromDomId", "guid-container");
                await Task.Delay(300);
                TryPassword(guid, password);
                break;
            case "SkipPassword":
                var account = await AuthHelper.FetchAccount();
                if ((account?.Roles.HasAnyRole(Role.Admin, Role.Moderator, Role.DatabaseAdmin) ?? false) || account?.Id == _passwordCachePage?.CreatedBy)
                {
                    guid = await JsRuntime.InvokeAsync<string>("getContentFromDomId", "guid-container");
                    if (!Guid.TryParse(guid, out var pageGuid))
                    {
                        Log.Error("Failed to parse guid {Guid}", guid);
                        return;
                    }

                    if (!PageReader.TryGetPagesFromGuid(pageGuid, out var pages))
                    {
                        Log.Error("Failed to get page from guid {Guid}", pageGuid);
                        return;
                    }

                    var page = pages.First();
                    LoadContent(page);
                } else {
                    Log.Warning("User tried to bypass password, but they are not an admin.");
                    JsRuntime.InvokeVoidAsync("showAlert", "Access denied.", "You do not have permission to bypass the password. (How did you call this function?)");
                }
                break;
        }
    }

    private void CopyLink()
    {
        // get current page link, so we can share it.
        var uri = new Uri(NavigationManager.Uri);
        // without the query string
        var link = uri.GetLeftPart(UriPartial.Path);
        link = link + "?page=" + _page!.VirtualPath;
        //Replace spaces with %20
        link = link.Replace(" ", "%20");
        JsRuntime.InvokeVoidAsync("copyToClipboard", link);
    }
    
    [JSInvokable]
    public void SetInstant(bool instant)
    {
        _status.CurrentTextSpeed = instant ? 0 : Constants.DefaultTextSpeed;
        _status.IsInstantText = instant;
    }
    
    private void Return(MouseEventArgs obj)
    {
        if (_status.PageStack.Count == 0)
        {
            Log.Warning("Tried to return, but the stack is empty.");
            return;
        }

        var page = _status.PageStack.Pop();
        LoadFromString(page, false);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsRuntime.InvokeVoidAsync("start", _dotNetRef);
            if (HttpContextAccessor.HttpContext != null && HttpContextAccessor.HttpContext.Request.Cookies.ContainsKey("instant") && HttpContextAccessor.HttpContext.Request.Cookies["instant"] == "true")
                // If the user has the instant cookie, we will set the text to instant.
            {
                SetInstant(true);
            }
        }
        else
        {
            return Task.CompletedTask;
        }
        
        // This is where we will load the page content.
        var uri = new Uri(NavigationManager.Uri);
        var query = uri.Query;
        var pageToLoad = "/system/boot"; // We default to the root page (startup screen).
        if (!string.IsNullOrEmpty(query))
        {
            var queryDict = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(query);
            if (queryDict.TryGetValue("page", out var value))
            {
                pageToLoad = value;
            }
        }

        if (int.TryParse(pageToLoad, out var pageId))
        {
            if (PageReader.TryGetPageFromId(pageId, out var pageIdPage))
            {
                _passwordCachePage = pageIdPage;
                LoadContent(pageIdPage);
                return Task.CompletedTask;
            }
        }

        if (!PageReader.IsPathValid(pageToLoad!)) // If the path is not valid, we will load the 404 page.
        {
            pageToLoad = "/system/notfound";
        }
        
        // js stupid
        if (pageToLoad != null && pageToLoad.Contains("%20"))
        {
            pageToLoad = pageToLoad.Replace("%20", " ");
        }
        
        if (!PageReader.TryGetPageFromPath(pageToLoad!, out var page))
        {
            Log.Error("Failed to load page {Page}", pageToLoad); // Probably a db error of some sort.
            return Task.CompletedTask;
        }
        
        if (page.Flags.HasFlag(PageFlagType.PasswordProtected)) // If the page is password protected, we will ask for a password.
        {
            _passwordCachePage = page;
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("showPasswordPrompt", page.PageGuid.ToString());
            return Task.CompletedTask;
        }
        
        LoadContent(page);
        return Task.CompletedTask;
    }
    
    private async void LoadContent(Page page, bool saveToStack = true)
    {
        await _cts.CancelAsync();
        _cts = new CancellationTokenSource();
        if (saveToStack)
        {
            _status.PageStack.Push(_page?.VirtualPath ?? "/system/listing");
        }
        
        _page = page;
        var sw = Stopwatch.StartNew();
        var content = (await RichTextParser.Parse(page.Content)).Value;
        Log.Debug("Parsed content in {Time}ms", sw.ElapsedMilliseconds);
        _status.CurrentTextSpeed = Constants.DefaultTextSpeed;
        if (_status.IsInstantText)
        {
            _status.CurrentTextSpeed = 0;
        }
        
        _status.Content = new MarkupString("");
        StateHasChanged();

        // This will be the actual content that is displayed.
        var contentString = "";
        var loadAfterFinish = "";

        try
        {
            for (var i = 0; i < content.Length; i++)
            {
                var exit = false;
                
                if (_cts.Token.IsCancellationRequested)
                {
                    return;
                }

                if (_status.IsInstantText)
                {
                    // straight up just render the whole thing.
                    
                    // first, remove any tags.
                    content = content.Replace("[speed=default]", "");
                    // regex remove [speed=number]
                    content = System.Text.RegularExpressions.Regex.Replace(content, @"\[speed=\d+\]", "");
                    // regex remove [delay=number]
                    content = System.Text.RegularExpressions.Regex.Replace(content, @"\[delay=\d+\]", "");
                    // regex remove [play=audio]
                    content = System.Text.RegularExpressions.Regex.Replace(content, @"\[play=[a-zA-Z0-9.]+\]", "");
                    // regex remove [load=page]
                    content = System.Text.RegularExpressions.Regex.Replace(content, @"\[load=[a-zA-Z0-9]+\]", "");
                    
                    _status.Content = new MarkupString(content);
                    StateHasChanged();
                    return;
                }
                
                var c = content[i];
                contentString += c;
    
                if (c == '[')
                {
                    var tag = "";
                    for (var i1 = i; i1 < content.Length; i1++)
                    {
                        if (content[i1] == ']')
                        {
                            break;
                        }
    
                        if (content[i1] == '\n')
                        {
                            break;
                        }
    
                        tag += content[i1];
                    }
    
                    if (tag != "")
                    {
                        i += tag.Length;
                        contentString = contentString.Remove(contentString.Length - 1);
    
                        var tagParts = tag.Split('=');
                        var tagName = tagParts[0].Replace("[", "");
                        var tagValue = tagParts.Length > 1 ? tagParts[1].Replace("]", "") : "";
    
                        switch (tagName)
                        {
                            case "speed":
                                if (_status.IsInstantText) // If the text is instant, we will ignore the speed tag.
                                    break;
                                
                                if (int.TryParse(tagValue, out var speed))
                                {
                                    _status.CurrentTextSpeed = speed;
                                }
                                else
                                {
                                    if (tagValue == "default")
                                    {
                                        _status.CurrentTextSpeed = Constants.DefaultTextSpeed;
                                    }
                                    else
                                    {
                                        throw new InvalidOperationException($"Invalid speed: {tagValue}");
                                    }
                                }
    
                                break;
                            case "delay":
                                if (_status.IsInstantText) // If the text is instant, we will ignore the delay tag.
                                    break;
                                
                                if (int.TryParse(tagValue, out var delay))
                                {
                                    await Task.Delay(delay);
                                }
                                else
                                {
                                    throw new InvalidOperationException($"Invalid delay: {tagValue}");
                                }
                                break;
                            case "play":
                                // This shit will not sound good with instant on
                                if (_status.IsInstantText) 
                                    break;
                                await JsRuntime.InvokeVoidAsync("playAudio",tagValue);
                                break;
                            case "load":
                                exit = true;
                                loadAfterFinish = tagValue;
                                _status.PageStack.Clear();
                                break;
    
                            default:
                                i -= tag.Length; // Go back to the start of the tag.
                                contentString += c;
                                // Unknown tag, just log and continue.
                                Log.Warning("Unknown tag: {Tag}", tag);
                                break;
                        }
                    }
                }
    
                if (exit)
                    break;
    
                _status.Content = new MarkupString(contentString);
                if (page.Flags.HasFlag(PageFlagType.ScrollToBottom))
                {
                    await JsRuntime.InvokeVoidAsync("scrollToBottom");
                }
    
                // certain actions are just stupid with a 0 speed, since they are instant.
                if (_status.CurrentTextSpeed > 0)
                {
                    StateHasChanged();
                    await JsRuntime.InvokeVoidAsync("playText");
                    await Task.Delay(_status.CurrentTextSpeed);
                }
            }
        }
        catch (Exception e)
        {
            Log.Error(e, "Failed to load content.");
            _status.Content = new MarkupString(_status.Content.Value + "\n\nAn error occurred while loading the content. \n" + e.Message + "\n" + e.StackTrace);
        }

        StateHasChanged();
        
        if (!string.IsNullOrEmpty(loadAfterFinish))
        {
            LoadFromString(loadAfterFinish);
        }
    }
    
    [JSInvokable]
    public void TryPassword(string pageGuid, string password) // This is called from the password prompt.
    {
        if (!Guid.TryParse(pageGuid, out var guid))
        {
            Log.Error("Failed to parse guid {Guid}", pageGuid);
            return;
        }
        
        if (!PageReader.TryGetPagesFromGuid(guid, out var pages))
        {
            Log.Error("Failed to get page from guid {Guid}", guid);
            return;
        }

        var page = pages.First();
        var passwordFlag = page.Flags.FirstOrDefault(f => f.Type == PageFlagType.PasswordProtected);
        if (passwordFlag == null)
        {
            Log.Error("Failed to get password flag for page {Page}", page.PageGuid);
            return;
        }
        
        if (passwordFlag.Value == password)
        {
            LoadContent(page);
        }
        else
        {
            _passwordCachePage = page;
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("showAlert", "Incorrect password.", "The password you entered is incorrect.");
            JsRuntime.InvokeVoidAsync("showPasswordPrompt", page.PageGuid.ToString());
        }
    }
    
    [JSInvokable]
    public void LoadFromString(string path, bool saveToStack = true)
    {
        // ok stupid BUT JS converts stuff like spaces to %20, so we need to convert it back.
        path = path.Replace("%20", " ");
        
        var pageToLoad = path;
        if (!PageReader.IsPathValid(path)) // If the path is not valid, we will load the 404 page.
        {
            pageToLoad = "/system/notfound";
        }
        
        if (!PageReader.TryGetPageFromPath(pageToLoad, out var page))
        {
            Log.Error("Failed to load page {Page}", path); // Probably a db error of some sort.
            return;
        }
        
        if (page.Flags.HasFlag(PageFlagType.PasswordProtected)) // If the page is password protected, we will ask for a password.
        {
            _passwordCachePage = page;
            StateHasChanged();
            JsRuntime.InvokeVoidAsync("showPasswordPrompt", page.PageGuid.ToString());
            return;
        }
        
        LoadContent(page, saveToStack);
    }
}