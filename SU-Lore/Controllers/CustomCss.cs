using System.Text;
using System.Text.RegularExpressions;
using AngleSharp;
using AngleSharp.Css;
using AngleSharp.Css.Dom;
using AngleSharp.Css.Parser;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using SU_Lore.Data;
using SU_Lore.Database;
using SU_Lore.Database.Models.Pages;

namespace SU_Lore.Controllers;

[Controller]
public class CustomCss : Controller
{
    private ApplicationDbContext _context;

    public CustomCss(ApplicationDbContext context)
    {
        _context = context;
    }

    [HttpGet("/page_custom.css")]
    public async Task<IActionResult> GetPageCustomCss([FromQuery] int pageId)
    {
        var page = await _context.Pages
            .Include(page => page.Flags)
            .FirstOrDefaultAsync(page => page.Id == pageId);

        if (page == null)
        {
            return NotFound();
        }

        if (!page.Flags.HasFlag(PageFlagType.CustomCss))
        {
            return NotFound();
        }

        var css = page.Flags.GetFlagValue(PageFlagType.CustomCss);
        if (string.IsNullOrWhiteSpace(css))
        {
            return NotFound();
        }

        var customCss = AppendWarning(new StringBuilder());

        customCss.AppendLine(SanitizeCss(css));

        // Make sure the browser doesn't cache the CSS file
        Response.Headers.Append("Cache-Control", "no-cache, no-store, must-revalidate");

        return Content(customCss.ToString(), "text/css");
    }

    [HttpGet("/custom.css")]
    public async Task<IActionResult> GetCustomCss()
    {
        var colors = await _context.Colors.ToListAsync();

        colors.RemoveAll(c => c.Hex.Length != 7);
        for (var i = 0; i < colors.Count; i++)
        {
            var color = colors[i];
            if (color.Name.All(c => Constants.AllowedColorNameCharacters.Contains(c))) continue;

            Log.Warning("Invalid color name: {ColorName}", color.Name);
            colors.RemoveAt(i);
            i--;
        }

        var css = AppendWarning(new StringBuilder());

        css.AppendLine(":root {");
        foreach (var color in colors)
        {
            css.AppendLine($"--fg-{color.Name}: {color.Hex};");
            css.AppendLine($"--glow-{color.Name}: {color.Hex}cc;");
        }

        css.AppendLine("}");

        foreach (var color in colors)
        {
            css.AppendLine($".color-{color.Name} {{");
            css.AppendLine($"    color: var(--fg-{color.Name});");
            css.AppendLine($"    text-shadow: 0 0 3px var(--glow-{color.Name});");
            css.AppendLine("}");
        }

        // Make sure the browser doesn't cache the CSS file
        Response.Headers.Append("Cache-Control", "no-cache, no-store, must-revalidate");

        return Content(css.ToString(), "text/css");
    }

    private StringBuilder AppendWarning(StringBuilder sb)
    {
        sb.AppendLine("/* This file is generated on the fly. ");
        sb.AppendLine(" * Do not edit it directly. ");
        // get a custom message from the database
        var message = Constants.CustomCssMessages[new Random().Next(Constants.CustomCssMessages.Length)];
        sb.Append($" * {message}");
        sb.AppendLine(" */");
        sb.AppendLine();
        sb.AppendLine("/* Generated by SU-Lore - CSS START: */");

        return sb;
    }

    #region CSS Sanitizing

    private static string RemoveDisallowedPatterns(string cssInput)
    {
        foreach (var pattern in Constants.DisallowedPatterns)
        {
            cssInput = Regex.Replace(cssInput, pattern, "REMOVED", RegexOptions.IgnoreCase);
        }
        return cssInput;
    }

    private static string EnsureSafeUrls(string cssInput)
    {
        var urlPattern = @"url\((['""]?)(.*?)\1\)";
        cssInput = Regex.Replace(cssInput, urlPattern, match =>
        {
            var url = match.Groups[2].Value;

            if (Uri.TryCreate(url, UriKind.Absolute, out var uri))
            {
                if (uri.Scheme != Uri.UriSchemeHttp && uri.Scheme != Uri.UriSchemeHttps)
                {
                    Log.Warning("Removed disallowed URL: {Url}", url);
                    return "url('')";
                }
            }
            else if (url.StartsWith("/") || url.StartsWith("./") || url.StartsWith("../"))
            {
                return match.Value;
            }

            Log.Warning("Removed disallowed URL: {Url}", url);
            return "url('')";
        }, RegexOptions.IgnoreCase);

        return cssInput;
    }

    private static string SanitizeProperties(string cssInput)
    {
        var parser = new CssParser();
        var stylesheet = parser.ParseStyleSheet(cssInput);

        foreach (var rule in stylesheet.Rules)
        {
            if (rule is ICssStyleRule styleRule)
            {
                foreach (var property in styleRule.Style)
                {
                    if (Constants.DisallowedProperties.Contains(property.Name.ToLower()))
                    {
                        styleRule.Style.RemoveProperty(property.Name);
                        Log.Warning("Removed disallowed property: {PropertyName}", property.Name);
                    }
                }
            }
        }

        return stylesheet.ToCss(new PrettyStyleFormatter());
    }

    public static string SanitizeCss(string cssInput)
    {
        cssInput = RemoveDisallowedPatterns(cssInput);
        cssInput = EnsureSafeUrls(cssInput);
        cssInput = SanitizeProperties(cssInput);
        return cssInput;
    }

    #endregion
}